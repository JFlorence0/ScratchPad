@inherits LayoutComponentBase
@inject ScratchPad.Services.UIState UIState

<div class="page">
    <!-- Sidebar with toggle logic -->
    <div class="sidebar @IsCollapsed">
        <div class="navbar-toggler-container @IsCollapsed">
            <div class="nav-scrollable @IsCollapsed">
                <div class="nav-link-logo-container">
                    <div class="nav-link-icon-container @IsCollapsed">
                        <img src="images/stylus-icon.png" alt="Stylus Icon" class="nav-link-logo" />
                    </div>
                    <div class="nav-link-text-container @IsCollapsed">
                        <a class="navbar-brand" href="">ScratchPad</a>
                    </div>
                </div>
                <nav class="nav-flex-column @IsCollapsed">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/home-icon.png" alt="Home Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">Home</span>
                        </div>
                    </NavLink>

                    <NavLink class="nav-link" href="to-invest-in">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/trending-up-icon.png" alt="Trending Up Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">To Invest In</span>
                        </div>
                    </NavLink>

                    <NavLink class="nav-link" href="to-build">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/lightbulb-icon.png" alt="Lightbulb Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">To Build</span>
                        </div>
                    </NavLink>

                    <NavLink class="nav-link" href="to-do">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/list-icon.png" alt="List Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">To Do</span>
                        </div>
                    </NavLink>

                    <NavLink class="nav-link" href="to-study">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/book-icon.png" alt="Book Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">To Study</span>
                        </div>
                    </NavLink>
                    
                    <NavLink class="nav-link" href="mobylmenu">
                        <div class="nav-link-icon-container @IsCollapsed">
                            <img src="images/book-icon.png" alt="Book Icon" class="nav-link-icon" />
                        </div>
                        <div class="nav-link-text-container @IsCollapsed">
                            <span class="nav-link-text" aria-hidden="true">MobylMenu</span>
                        </div>
                    </NavLink>
                </nav>
            </div>
            <div class="navbar-toggler-icon-container" @onclick="UIState.ToggleSidebar">
                @if (UIState.IsSidebarCollapsed)
                {
                    <span class="nm-nav-toggle-btn" aria-hidden="true">+</span>
                }
                else
                {
                    <span class="nm-nav-toggle-btn" aria-hidden="true">-</span>
                }
            </div>
        </div>
    </div>

    <!-- Main content area -->
    <main class="@IsCollapsed">
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    // Variable that is based on the UIState.IsSidebarCollapsed
    // variable in UIState. If true, "collapsed" will be the class applied to the container,
    // and we'll apply styles to reflect the navbar as collapsed. Otherwise, "expanded" is applied.
    private string IsCollapsed => UIState.IsSidebarCollapsed ? "collapsed" : "expanded";

    // Variable that will be updated with the user's last selection, we will base the styling on it.
    private string lastSelected => UIState.NavLinkSelection;

    // This runs when the page is initialized. It's similar to a useEffect hook
    // with an empty dependency array in React. Inside, we are adding an event listener
    // that listens for sidebar state changes.
    protected override void OnInitialized()
    {
        UIState.SidebarStateChanged += OnSidebarStateChanged;
        UIState.NavLinkSelectionChanged += OnNavLinkSelectionChanged;
    }

    // This runs when the sidebar state changes, triggering a re-render of the component.
    // InvokeAsync ensures StateHasChanged is run on the correct thread for Blazor updates.
    private void OnSidebarStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnNavLinkSelectionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    // This runs when the page unmounts. It's similar to a cleanup function in React.
    // Here, we are unsubscribing (removing the event listener) to prevent memory leaks
    // or unintended behavior when the component is no longer in use.
    public void Dispose()
    {
        UIState.SidebarStateChanged -= OnSidebarStateChanged;
        UIState.NavLinkSelectionChanged -= OnNavLinkSelectionChanged;
    }
}

