@page "/mobylmenu"

@inject ApiService ApiService
@inject UserStateService UserStateService

<PageTitle>MobylMenu Metrics</PageTitle>

<div>
    @if (!isJames)
    {
        <div class="page-overlay">
            <div class="page-overlay-content">
                <h5 class="page-overlay-title">Are you James? <br />Enter the password</h5>
                <input type="password" id="password" class="input-field password-input" 
                       @bind="enteredPassword" 
                       placeholder="Enter Password" />
                <button type="submit" class="page-overlay-submit-button" @onclick="CheckPassword">Submit</button>
            </div>
        </div>
    }
    else
    {
        <!-- Main Metrics Content -->
        <h1 class="page-title">MobylMenu Metrics</h1>
        <p class="page-subtitle">Tracking MobylMenu activity.</p>
        <div class="horizontal-page-break"></div>

        <div class="page-body">
            <h3 class="page-body-title">Active User Metrics</h3>
            <div class="page-body-section">
                <div class="mm-active-users-container">
                    <div class="mm-active-user-metric-container">
                        <h4 class="mm-active-user-metric-title">DAUs</h4>
                        @if (isLoading)
                        {
                            <div class="loader-container">
                                <span class="loader"></span>
                            </div>
                        }
                        else
                        {
                            <span class="mm-active-user-metric-count" aria-live="polite">
                                @dailyActiveUsers
                            </span>
                        }

                    </div>

                    <div class="mm-active-user-metric-container">
                        <h4 class="mm-active-user-metric-title">WAUs</h4>
                        @if (isLoading)
                        {
                            <div class="loader-container">
                                <span class="loader"></span>
                            </div>
                        }
                        else
                        {
                            <span class="mm-active-user-metric-count" aria-live="polite">
                                @weeklyActiveUsers
                            </span>
                        }

                    </div>

                    <div class="mm-active-user-metric-container">
                        <h4 class="mm-active-user-metric-title">MAUs</h4>
                        @if (isLoading)
                        {
                            <div class="loader-container">
                                <span class="loader"></span>
                            </div>
                        }
                        else
                        {
                            <span class="mm-active-user-metric-count" aria-live="polite">
                                @monthlyActiveUsers
                            </span>
                        }

                    </div>

                    <div class="mm-active-user-metric-container">
                        <h4 class="mm-active-user-metric-title">Total Users</h4>
                        @if (isLoading)
                        {
                            <div class="loader-container">
                                <span class="loader"></span>
                            </div>
                        }
                        else
                        {
                            <span class="mm-active-user-metric-count" aria-live="polite">
                                @totalUsers
                            </span>
                        }

                    </div>
                </div>
                <div>
                    <h4 class="mm-active-user-metric-title">City Request Fulfillment</h4>
                    @if (isLoading) {
                        <span class="loader"></span>
                    }
                    else
                    {
                        <ul>
                            @foreach (var cityMetric in @cityRequestMetrics)
                            {
                                <li>@cityMetric.Key: @cityMetric.Value venues</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    // State management
     private UserState userState = new UserState();
     private bool isJames => userState.IsJames;

    // define isLoading variable
    private bool isLoading = false;

    // Password fields
    private string enteredPassword = string.Empty;
    private string correctPassword = "Basketba11";

    // User metrics
    private int dailyActiveUsers = 0;
    private int weeklyActiveUsers = 0;
    private int monthlyActiveUsers = 0;
    private int totalUsers = 0;
    private Dictionary<string, int> cityRequestMetrics = new Dictionary<string, int>();

    // Blazor version of On component mount, runs once.
    protected override async Task OnInitializedAsync()
    {
        // Load user state from sessionStorage
        var loadedUserState = await UserStateService.LoadUserStateAsync();
        if (loadedUserState != null)
        {
            userState = loadedUserState;
            if (isJames)
            {
                await FetchUserMetrics();
            }
            else
            {
                Console.WriteLine("isJames is false. User metrics will not be fetched.");
            }
        }
    }

    private async Task FetchUserMetrics()
    {

        try
        {
            isLoading = true;
            var userMetrics = await ApiService.GetUserAnalyticsAsync();

            dailyActiveUsers = userMetrics.DailyActiveUsers;
            weeklyActiveUsers = userMetrics.WeeklyActiveUsers;
            monthlyActiveUsers = userMetrics.MonthlyActiveUsers;
            totalUsers = userMetrics.TotalUsers;
            cityRequestMetrics = userMetrics.CityRequestMetrics;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user metrics: {ex.Message}");
        }
        finally {
            isLoading = false;
        }
    }

    private async Task CheckPassword()
    {
        if (enteredPassword == correctPassword)
        {
            userState.IsJames = true;
            userState.LastLogin = DateTime.Now; // Update last login timestamp
            enteredPassword = string.Empty; // Clear the password field

            // Persist the user state to sessionStorage
            await UserStateService.SaveUserStateAsync(userState);

            await FetchUserMetrics();
        }
        else
        {
            Console.WriteLine("Password is incorrect.");
        }
    }
}